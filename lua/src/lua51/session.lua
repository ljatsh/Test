
--- session

local class = require('class')

local session = class()

local status = {
  closed = 1,               -- closed
  connected = 2,            -- connected
}

--- create a session connected to host:port, with a parser to receive incoming data
function session:ctor(host, port, parser)
end

--- perform connect action, and then start a new thread to drive the work flow
-- this API should be called in a thread
-- @return
function session:start()
  assert (coroutine.running() ~= nil)
end

--- force stopping the session work flow
function session:stop()
end

--- send msg asynchronously in sequence order
-- push msg to the back of sending queue
-- @param msg
-- @param cond conditions who does the request
function session:send(msg, cond)
end

--- this event was triggered when the session connected to remote server
function session:on_connected()
end

--- this event was triggered when the session dropped
-- we can wait a few seconds to start the session again
-- @param times how many dorpped times since last succesfully connection
function session:on_closed(times)
end

--- this event was triggered when a new message was generated by the working parser
function session:on_message(msg)
end

return session
